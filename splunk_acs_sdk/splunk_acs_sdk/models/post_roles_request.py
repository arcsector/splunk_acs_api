# coding: utf-8

"""
    Splunk Cloud Admin API

    API for managing splunk cloud stacks. (c) 2020 Splunk Inc. All rights reserved. I acknowledge that Splunk is not responsible for the installation or use of any application that is not a supported Splunk application and Splunk specifically disclaims the accuracy, integrity, quality, legality, usefulness or security of such application or its use. Installation and use of an application that is not a supported Splunk application is at your own risk. Please note that if data leaves Splunk Cloud as a result of installing or using such application, Splunkâ€™s security attestations do not apply to data outside Splunk Cloud. Learn more about installing private apps (link to https://docs.splunk.com/Documentation/SplunkCloud/8.2.2109/Config/ManageApps). Access and use is subject to the Splunk General Terms (https://www.splunk.com/en_us/legal/splunk-general-terms.html) and Splunk's Website Terms and Conditions (https://www.splunk.com/en_us/legal/terms/terms-of-use.html).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PostRolesRequest(BaseModel):
    """
    PostRolesRequest
    """ # noqa: E501
    capabilities: Optional[List[StrictStr]] = None
    rt_srch_jobs_quota: Optional[StrictInt] = Field(default=None, alias="rtSrchJobsQuota")
    srch_disk_quota: Optional[StrictInt] = Field(default=None, alias="srchDiskQuota")
    srch_filter: Optional[StrictStr] = Field(default=None, alias="srchFilter")
    srch_indexes_allowed: Optional[List[StrictStr]] = Field(default=None, alias="srchIndexesAllowed")
    srch_indexes_default: Optional[List[StrictStr]] = Field(default=None, alias="srchIndexesDefault")
    srch_jobs_quota: Optional[StrictInt] = Field(default=None, alias="srchJobsQuota")
    srch_time_earliest: Optional[StrictInt] = Field(default=None, alias="srchTimeEarliest")
    srch_time_win: Optional[StrictInt] = Field(default=None, alias="srchTimeWin")
    cumulative_rt_srch_jobs_quota: Optional[StrictInt] = Field(default=None, alias="cumulativeRTSrchJobsQuota")
    cumulative_srch_jobs_quota: Optional[StrictInt] = Field(default=None, alias="cumulativeSrchJobsQuota")
    default_app: Optional[StrictStr] = Field(default=None, alias="defaultApp")
    imported_roles: Optional[List[StrictStr]] = Field(default=None, alias="importedRoles")
    name: StrictStr
    __properties: ClassVar[List[str]] = ["capabilities", "rtSrchJobsQuota", "srchDiskQuota", "srchFilter", "srchIndexesAllowed", "srchIndexesDefault", "srchJobsQuota", "srchTimeEarliest", "srchTimeWin", "cumulativeRTSrchJobsQuota", "cumulativeSrchJobsQuota", "defaultApp", "importedRoles", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostRolesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostRolesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": obj.get("capabilities"),
            "rtSrchJobsQuota": obj.get("rtSrchJobsQuota"),
            "srchDiskQuota": obj.get("srchDiskQuota"),
            "srchFilter": obj.get("srchFilter"),
            "srchIndexesAllowed": obj.get("srchIndexesAllowed"),
            "srchIndexesDefault": obj.get("srchIndexesDefault"),
            "srchJobsQuota": obj.get("srchJobsQuota"),
            "srchTimeEarliest": obj.get("srchTimeEarliest"),
            "srchTimeWin": obj.get("srchTimeWin"),
            "cumulativeRTSrchJobsQuota": obj.get("cumulativeRTSrchJobsQuota"),
            "cumulativeSrchJobsQuota": obj.get("cumulativeSrchJobsQuota"),
            "defaultApp": obj.get("defaultApp"),
            "importedRoles": obj.get("importedRoles"),
            "name": obj.get("name")
        })
        return _obj


