# coding: utf-8

"""
    Splunk Cloud Admin API

    API for managing splunk cloud stacks. (c) 2020 Splunk Inc. All rights reserved. I acknowledge that Splunk is not responsible for the installation or use of any application that is not a supported Splunk application and Splunk specifically disclaims the accuracy, integrity, quality, legality, usefulness or security of such application or its use. Installation and use of an application that is not a supported Splunk application is at your own risk. Please note that if data leaves Splunk Cloud as a result of installing or using such application, Splunkâ€™s security attestations do not apply to data outside Splunk Cloud. Learn more about installing private apps (link to https://docs.splunk.com/Documentation/SplunkCloud/8.2.2109/Config/ManageApps). Access and use is subject to the Splunk General Terms (https://www.splunk.com/en_us/legal/splunk-general-terms.html) and Splunk's Website Terms and Conditions (https://www.splunk.com/en_us/legal/terms/terms-of-use.html).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.maintenance_windows_response import MaintenanceWindowsResponse

class TestMaintenanceWindowsResponse(unittest.TestCase):
    """MaintenanceWindowsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MaintenanceWindowsResponse:
        """Test MaintenanceWindowsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MaintenanceWindowsResponse`
        """
        model = MaintenanceWindowsResponse()
        if include_optional:
            return MaintenanceWindowsResponse(
                next_link = '',
                schedules = [
                    openapi_client.models.maintenance_windows_schedule.MaintenanceWindowsSchedule(
                        duration = '', 
                        last_modified_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_summary = '', 
                        mw_type = '', 
                        operations = [
                            openapi_client.models.maintenance_windows_operation.MaintenanceWindowsOperation(
                                sfdc_tickets = [
                                    ''
                                    ], 
                                app_name = '', 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                metadata = openapi_client.models.metadata.metadata(), 
                                notes = [
                                    ''
                                    ], 
                                operation_description = '', 
                                operation_status = '', 
                                operation_type = '', 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                target_version = '', 
                                zero_downtime = True, )
                            ], 
                        requested_entity = '', 
                        requested_user = '', 
                        schedule_id = '', 
                        schedule_start_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = '', 
                        zero_downtime = True, )
                    ]
            )
        else:
            return MaintenanceWindowsResponse(
                next_link = '',
                schedules = [
                    openapi_client.models.maintenance_windows_schedule.MaintenanceWindowsSchedule(
                        duration = '', 
                        last_modified_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_summary = '', 
                        mw_type = '', 
                        operations = [
                            openapi_client.models.maintenance_windows_operation.MaintenanceWindowsOperation(
                                sfdc_tickets = [
                                    ''
                                    ], 
                                app_name = '', 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                metadata = openapi_client.models.metadata.metadata(), 
                                notes = [
                                    ''
                                    ], 
                                operation_description = '', 
                                operation_status = '', 
                                operation_type = '', 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                target_version = '', 
                                zero_downtime = True, )
                            ], 
                        requested_entity = '', 
                        requested_user = '', 
                        schedule_id = '', 
                        schedule_start_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = '', 
                        zero_downtime = True, )
                    ],
        )
        """

    def testMaintenanceWindowsResponse(self):
        """Test MaintenanceWindowsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
