{
  "components": {
    "parameters": {
      "app-name": {
        "description": "the app name",
        "in": "path",
        "name": "app",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "appGroup": {
        "description": "the app name",
        "in": "path",
        "name": "appGroup",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "bucketName": {
        "description": "bucket for self storage location",
        "in": "path",
        "name": "bucketName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "bucketPath": {
        "description": "bucket path of the self storage location",
        "in": "path",
        "name": "bucketPath",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "confsOnly": {
        "description": "export only the configs as per request parameters and donâ€™t export any app data",
        "in": "query",
        "name": "confs_only",
        "schema": {
          "type": "boolean"
        }
      },
      "count": {
        "description": "The maximum number of results to return.",
        "in": "query",
        "name": "count",
        "schema": {
          "default": 30,
          "format": "int64",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "defaultDirectory": {
        "description": "export the default configs for the app etc/apps/<app_id>/default/*",
        "in": "query",
        "name": "default",
        "schema": {
          "type": "boolean"
        }
      },
      "deploymentID": {
        "description": "deployment ID",
        "in": "path",
        "name": "deploymentID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "feature": {
        "description": "the feature the access rules apply towards",
        "in": "path",
        "name": "feature",
        "required": true,
        "schema": {
          "enum": [
            "s2s",
            "hec",
            "search-ui",
            "search-api",
            "idm-api",
            "idm-ui"
          ],
          "type": "string"
        }
      },
      "featureName": {
        "description": "the feature name",
        "in": "path",
        "name": "featureName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "federatedSearchManage": {
        "description": "Set Federated-Search-Manage-Ack to 'Y' to acknowledge your acceptance that roles with fsh_manage capability can send search results data outside the compliant environment",
        "in": "header",
        "name": "Federated-Search-Manage-Ack",
        "schema": {
          "type": "string"
        }
      },
      "fromTime": {
        "description": "The earliest time to return results from. Format is expected to be YYYY-MM-DD or in RFC3339. UTC is the default timezone.",
        "in": "query",
        "name": "fromTime",
        "schema": {
          "type": "string"
        }
      },
      "grantableOnly": {
        "description": "only show grantable capabilities",
        "in": "query",
        "name": "grantableOnly",
        "schema": {
          "type": "boolean"
        }
      },
      "hec": {
        "description": "hec name",
        "in": "path",
        "name": "hec",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "index": {
        "description": "index name",
        "in": "path",
        "name": "index",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "key": {
        "description": "key name",
        "in": "path",
        "name": "key",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "localDirectory": {
        "description": "export the local configs for the app under etc/apps/<app_id>/local/*",
        "in": "query",
        "name": "local",
        "schema": {
          "type": "boolean"
        }
      },
      "nextLink": {
        "description": "The key for the next page of the result set. A nextLink with the value null indicates there are no more pages.",
        "in": "query",
        "name": "nextLink",
        "schema": {
          "type": "string"
        }
      },
      "offset": {
        "description": "The offset to start returning items from.",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": 0,
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "roleName": {
        "description": "role name",
        "in": "path",
        "name": "roleName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "scheduleID": {
        "description": "The maintenance window schedule ID.",
        "in": "path",
        "name": "scheduleID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "stack": {
        "description": "the stack name",
        "in": "path",
        "name": "stack",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "stanza": {
        "description": "stanza name",
        "in": "path",
        "name": "stanza",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "toTime": {
        "description": "The latest time to return results from. Format is expected to be YYYY-MM-DD or in RFC3339. UTC is the default timezone.",
        "in": "query",
        "name": "toTime",
        "schema": {
          "type": "string"
        }
      },
      "tokenID": {
        "description": "token ID",
        "in": "path",
        "name": "tokenID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tokenStatus": {
        "description": "status of tokens wanted",
        "in": "query",
        "name": "status",
        "schema": {
          "type": "string"
        }
      },
      "userName": {
        "description": "user name",
        "in": "path",
        "name": "userName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "username": {
        "description": "user of tokens wanted",
        "in": "query",
        "name": "username",
        "schema": {
          "type": "string"
        }
      },
      "usersDirectory": {
        "description": "export the configs and data under etc/users/*/<app_id>/* for the users on which the requester has access over",
        "in": "query",
        "name": "users",
        "schema": {
          "type": "boolean"
        }
      },
      "workflowName": {
        "description": "Name/ID of the workflow",
        "in": "path",
        "name": "workflowName",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "defaultError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "unexpected error"
      }
    },
    "schemas": {
      "App": {
        "description": "an splunk installed on the stack",
        "properties": {
          "appID": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "package": {
            "type": "string"
          },
          "splunkbaseID": {
            "type": "string"
          },
          "stateChangeRequiresRestart": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "AppFeatureEnablement": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "AppPerms": {
        "description": "App Permissions",
        "properties": {
          "name": {
            "type": "string"
          },
          "perms": {
            "$ref": "#/components/schemas/AppPermsProperties"
          }
        },
        "required": [
          "name",
          "perms"
        ]
      },
      "AppPermsList": {
        "properties": {
          "apps": {
            "items": {
              "$ref": "#/components/schemas/AppPerms"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppPermsProperties": {
        "properties": {
          "read": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "write": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CapabilitiesInfo": {
        "description": "capabilities list",
        "properties": {
          "grantableCapabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "systemCapabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "ChangePythonVersionRequest": {
        "properties": {
          "pythonVersion": {
            "type": "string"
          }
        }
      },
      "CreateEcSsoPairingResponse": {
        "description": "ID for pairing Splunk Cloud stack with Observability organization",
        "properties": {
          "pairingId": {
            "type": "string"
          }
        }
      },
      "CreateUserRequest": {
        "description": "Create user request body",
        "properties": {
          "createRole": {
            "type": "boolean"
          },
          "defaultApp": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "forceChangePass": {
            "type": "boolean"
          },
          "fullName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "password"
        ],
        "type": "object"
      },
      "DeploymentInfo": {
        "properties": {
          "id": {
            "description": "the id of the latest deployment task",
            "type": "string"
          },
          "status": {
            "description": "the status of the last deployment task, possible values are new, completed, pending, running, failed.",
            "type": "string"
          },
          "timestamp": {
            "description": "timestamp of the latest deployment task",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeploymentStatus": {
        "properties": {
          "lastDeployment": {
            "$ref": "#/components/schemas/DeploymentInfo"
          }
        },
        "required": [
          "lastDeployment"
        ]
      },
      "DescribeEligibilityPrivateConnectivity": {
        "properties": {
          "eligible": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "DescribeManagedGlueResources": {
        "properties": {
          "managedGlueResources": {
            "items": {
              "$ref": "#/components/schemas/ManagedGlueResources"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "DescribePrivateConnectivity": {
        "properties": {
          "endpoints": {
            "items": {
              "$ref": "#/components/schemas/PrivateConnectivityEndpoints"
            },
            "type": "array"
          }
        }
      },
      "DescribeWorkflowResponseObject": {
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "finishedAt": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "startedAt": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "EmekKeyUploadResponse": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "EmekPolicy": {
        "properties": {
          "message": {
            "type": "string"
          },
          "policy": {
            "type": "object"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "policy",
          "message",
          "region"
        ]
      },
      "EnableObservabilityCapabilitiesResponse": {
        "description": "CO2 spec value of the o11y key",
        "properties": {
          "centralizedRBACEnabled": {
            "type": "boolean"
          }
        }
      },
      "EnablePrivateConnectivity": {
        "properties": {
          "customerAccountIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "feature": {
            "$ref": "#/components/schemas/PrivateConnectivityFeatures"
          }
        }
      },
      "Error": {
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "GetEcSsoPairingStatusResponse": {
        "description": "Status for pairing Splunk Cloud stack with Observability organization",
        "properties": {
          "pairingId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "HecInfo": {
        "properties": {
          "spec": {
            "$ref": "#/components/schemas/HecSpec"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HecSpec": {
        "properties": {
          "allowedIndexes": {
            "items": {
              "description": "allowed indices",
              "type": "string"
            },
            "type": "array"
          },
          "defaultHost": {
            "type": "string"
          },
          "defaultIndex": {
            "type": "string"
          },
          "defaultSource": {
            "type": "string"
          },
          "defaultSourcetype": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "useAck": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "ImportedRolesInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RolesInfo"
          },
          {
            "properties": {
              "roles": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "IndexInfo": {
        "properties": {
          "datatype": {
            "default": "event",
            "type": "string"
          },
          "maxDataSizeMB": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "searchableDays": {
            "default": 90,
            "format": "int64",
            "type": "integer"
          },
          "selfStorageBucketPath": {
            "type": "string"
          },
          "splunkArchivalRetentionDays": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "name"
        ]
      },
      "IndexResponse": {
        "properties": {
          "datatype": {
            "default": "event",
            "type": "string"
          },
          "maxDataSizeMB": {
            "default": 0,
            "format": "uint64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "searchableDays": {
            "default": 90,
            "format": "uint64",
            "type": "integer"
          },
          "selfStorageBucketPath": {
            "type": "string"
          },
          "splunkArchivalRetentionDays": {
            "format": "uint64",
            "type": "integer"
          },
          "totalEventCount": {
            "type": "string"
          },
          "totalRawSizeMB": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "datatype",
          "searchableDays",
          "maxDataSizeMB"
        ]
      },
      "LimitConfigurationInfo": {
        "properties": {
          "settings": {
            "format": "map[string]interface{}",
            "type": "object"
          }
        }
      },
      "LimitConfigurationResponse": {
        "properties": {
          "settings": {
            "properties": {
              "setting": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "array"
          }
        }
      },
      "LimitResetSettingsList": {
        "properties": {
          "settings": {
            "format": "[]interface{}",
            "type": "array"
          }
        }
      },
      "LimitSetting": {
        "properties": {
          "defaultValue": {
            "format": "double",
            "type": "number"
          },
          "maxValue": {
            "format": "double",
            "type": "number"
          },
          "minValue": {
            "format": "double",
            "type": "number"
          },
          "setting": {
            "type": "string"
          }
        }
      },
      "LimitStanza": {
        "properties": {
          "settings": {
            "items": {
              "$ref": "#/components/schemas/LimitSetting"
            },
            "type": "array"
          },
          "stanza": {
            "type": "string"
          }
        }
      },
      "MaintenanceWindowsAuditResponse": {
        "properties": {
          "audits": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowsSchedule"
            },
            "type": "array"
          }
        },
        "required": [
          "audits"
        ]
      },
      "MaintenanceWindowsChangeFreezeRequest": {
        "properties": {
          "customerInitiatedFreezes": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowsCustomerInitiatedFreezeRequest"
            },
            "type": "array"
          }
        },
        "required": [
          "customerInitiatedFreezes"
        ]
      },
      "MaintenanceWindowsChangeFreezeResponse": {
        "properties": {
          "customerInitiatedFreezes": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowsCustomerInitiatedFreezeResponse"
            },
            "type": "array"
          },
          "splunkInitiatedFreezes": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowsSplunkInitiatedFreezeResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "customerInitiatedFreezes",
          "splunkInitiatedFreezes"
        ],
        "type": "object"
      },
      "MaintenanceWindowsCustomerInitiatedFreezeRequest": {
        "properties": {
          "appliesTo": {
            "description": "Type of changes the change freeze applies to.",
            "example": "Splunk Initiated Changes Only",
            "type": "string"
          },
          "endDate": {
            "description": "Date (YYYY/MM/DD) when the change freeze ends.",
            "example": "2006/02/01",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier (UUID) of the change freeze. This field should be left empty for new change freezes.",
            "type": "string"
          },
          "reason": {
            "description": "Reason for the change freeze.",
            "example": "Black Friday/Cyber Monday Sales Week",
            "type": "string"
          },
          "startDate": {
            "description": "Date (YYYY/MM/DD) when the change freeze starts.",
            "example": "2006/02/01",
            "type": "string"
          }
        },
        "required": [
          "startDate",
          "endDate",
          "appliesTo",
          "reason"
        ],
        "type": "object"
      },
      "MaintenanceWindowsCustomerInitiatedFreezeResponse": {
        "properties": {
          "appliesTo": {
            "description": "Type of changes the change freeze applies to.",
            "example": "Splunk Initiated Changes Only",
            "type": "string"
          },
          "createdTimestamp": {
            "description": "Time at which the change freeze was created.",
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "description": "Date (YYYY/MM/DD) when the change freeze ends.",
            "example": "2006/02/01",
            "type": "string"
          },
          "id": {
            "description": "UUID of the change freeze.",
            "type": "string"
          },
          "lastModifiedTimestamp": {
            "description": "Time at which the change freeze was last modified.",
            "format": "date-time",
            "type": "string"
          },
          "reason": {
            "description": "Reason for the change freeze.",
            "example": "Black Friday/Cyber Monday Sales Week",
            "type": "string"
          },
          "startDate": {
            "description": "Date (YYYY/MM/DD) when the change freeze starts.",
            "example": "2006/02/01",
            "type": "string"
          },
          "tickets": {
            "description": "SFDC Tickets associated with the change freeze request.",
            "example": [
              "SFDC-1234",
              "SFDC-1235"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "startDate",
          "endDate",
          "appliesTo",
          "reason",
          "tickets",
          "createdTimestamp",
          "lastModifiedTimestamp"
        ],
        "type": "object"
      },
      "MaintenanceWindowsOperation": {
        "properties": {
          "SFDCTickets": {
            "description": "List of SFDC tickets associated with the operation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "appName": {
            "description": "Name of the app to be upgraded.",
            "type": "string"
          },
          "endTime": {
            "description": "Time at which the operation ended.",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "description": "A map containing metadata about the operation (e.g. targetVersion, lastStatusBeforeCanceled, etc...).",
            "type": "object"
          },
          "notes": {
            "description": "Notes for the customer.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "operationDescription": {
            "description": "Description of the operation.",
            "type": "string"
          },
          "operationStatus": {
            "description": "Status of the operation.",
            "type": "string"
          },
          "operationType": {
            "description": "Type of the operation.",
            "type": "string"
          },
          "startTime": {
            "description": "Time at which the operation started.",
            "format": "date-time",
            "type": "string"
          },
          "targetVersion": {
            "description": "Target version after the upgrade.",
            "type": "string"
          },
          "zeroDowntime": {
            "description": "True if the operation will have no impact on the uptime of the stack.",
            "type": "boolean"
          }
        },
        "required": [
          "operationStatus",
          "operationDescription",
          "operationType",
          "zeroDowntime"
        ]
      },
      "MaintenanceWindowsPreferencesRequest": {
        "properties": {
          "changeFreezes": {
            "$ref": "#/components/schemas/MaintenanceWindowsChangeFreezeRequest"
          },
          "recordVersion": {
            "description": "Version of the record.",
            "type": "integer"
          }
        },
        "required": [
          "changeFreezes"
        ]
      },
      "MaintenanceWindowsPreferencesResponse": {
        "properties": {
          "changeFreezes": {
            "$ref": "#/components/schemas/MaintenanceWindowsChangeFreezeResponse"
          },
          "recordVersion": {
            "description": "Version of the record.",
            "type": "integer"
          }
        },
        "required": [
          "changeFreezes",
          "recordVersion"
        ]
      },
      "MaintenanceWindowsResponse": {
        "properties": {
          "nextLink": {
            "type": "string"
          },
          "schedules": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowsSchedule"
            },
            "type": "array"
          }
        },
        "required": [
          "schedules",
          "nextLink"
        ]
      },
      "MaintenanceWindowsSchedule": {
        "properties": {
          "duration": {
            "description": "The duration of the maintenance window.",
            "type": "string"
          },
          "lastModifiedTimestamp": {
            "description": "Time at which the maintenance window was last modified. Format is RFC3339.",
            "format": "date-time",
            "type": "string"
          },
          "lastSummary": {
            "description": "The summary or reason for the maintenance.",
            "type": "string"
          },
          "mwType": {
            "description": "The type of upgrade performed in the maintenance window.",
            "type": "string"
          },
          "operations": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowsOperation"
            },
            "type": "array"
          },
          "requestedEntity": {
            "description": "The entity which requested the maintenance window, either the customer or Splunk.",
            "type": "string"
          },
          "requestedUser": {
            "description": "The user who requested the maintenance window.",
            "type": "string"
          },
          "scheduleId": {
            "description": "UUID of the maintenance window.",
            "type": "string"
          },
          "scheduleStartTimestamp": {
            "description": "Time at which the maintenance window is scheduled to begin. Format is RFC3339.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The status of the maintenance window schedule.",
            "type": "string"
          },
          "zeroDowntime": {
            "description": "True if the maintenance window will have no impact on the uptime of the stack.",
            "type": "boolean"
          }
        },
        "required": [
          "duration",
          "scheduleStartTimestamp",
          "status",
          "requestedEntity",
          "scheduleId",
          "lastModifiedTimestamp",
          "mwType",
          "zeroDowntime"
        ]
      },
      "MaintenanceWindowsSplunkInitiatedFreezeResponse": {
        "properties": {
          "appliesTo": {
            "description": "Type of changes the change freeze applies to.",
            "example": "Splunk Initiated Changes Only",
            "type": "string"
          },
          "category": {
            "description": "Category of change freeze.",
            "example": "Professional Services",
            "type": "string"
          },
          "createdTimestamp": {
            "description": "Time at which the change freeze was created.",
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "description": "Date (YYYY/MM/DD) when the change freeze ends.",
            "example": "2006/02/01",
            "type": "string"
          },
          "id": {
            "description": "UUID of the change freeze.",
            "type": "string"
          },
          "lastModifiedTimestamp": {
            "description": "Time at which the change freeze was last modified.",
            "format": "date-time",
            "type": "string"
          },
          "reason": {
            "description": "Reason for the change freeze.",
            "example": "Splunk Holiday",
            "type": "string"
          },
          "startDate": {
            "description": "Date (YYYY/MM/DD) when the change freeze starts.",
            "example": "2006/02/01",
            "type": "string"
          },
          "tickets": {
            "description": "Tickets associated with the change freeze request.",
            "example": [
              "JIRA-1234",
              "JIRA-1235"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "startDate",
          "endDate",
          "appliesTo",
          "category",
          "reason",
          "tickets",
          "createdTimestamp",
          "lastModifiedTimestamp"
        ],
        "type": "object"
      },
      "ManagedGlueResources": {
        "properties": {
          "cloudProvider": {
            "enum": [
              "AWS"
            ],
            "type": "string"
          },
          "database": {
            "type": "string"
          },
          "extra": {
            "$ref": "#/components/schemas/extra"
          },
          "fieldDelimiter": {
            "type": "string"
          },
          "fileFormat": {
            "type": "string"
          },
          "locationPrefix": {
            "type": "string"
          },
          "partitionProjection": {
            "$ref": "#/components/schemas/partitionProjection"
          },
          "sourceType": {
            "pattern": "^(cloudtrail)$",
            "type": "string"
          },
          "table": {
            "type": "string"
          }
        },
        "required": [
          "cloudProvider",
          "database",
          "fileFormat",
          "locationPrefix",
          "partitionProjection",
          "table",
          "sourceType"
        ]
      },
      "OutboundResponse": {
        "properties": {
          "destinationRanges": {
            "items": {
              "description": "destination ranges",
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "port": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "PatchAppPermsRequest": {
        "description": "patch permissions apps body",
        "properties": {
          "read": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "write": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "PatchIndexInfo": {
        "properties": {
          "maxDataSizeMB": {
            "format": "int64",
            "type": "integer"
          },
          "searchableDays": {
            "format": "int64",
            "type": "integer"
          },
          "selfStorageBucketPath": {
            "type": "string"
          },
          "splunkArchivalRetentionDays": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "PatchSplunkbaseBody": {
        "description": "the splunkbase app version to update.  If no version specified, the latest version will be installed.",
        "properties": {
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchUserRequest": {
        "description": "Patch user request body",
        "properties": {
          "defaultApp": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "forceChangePass": {
            "type": "boolean"
          },
          "fullName": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PostRolesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RolesRequest"
          },
          {
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          }
        ]
      },
      "PrivateAppBody": {
        "description": "the app package in tgz format",
        "format": "binary",
        "type": "string"
      },
      "PrivateConnectivityEndpoints": {
        "properties": {
          "customerAccountIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "endpoint": {
            "type": "string"
          },
          "feature": {
            "enum": [
              "ingest",
              "search"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "privateSearch-DNSRecords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "searchDNSRecords"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "PrivateConnectivityFeatures": {
        "items": {
          "enum": [
            "ingest",
            "search"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "PythonVersionResponse": {
        "properties": {
          "message": {
            "type": "string"
          },
          "pythonVersion": {
            "type": "string"
          }
        }
      },
      "RestartResponse": {
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "RestartStatus": {
        "properties": {
          "captain": {
            "type": "string"
          },
          "rollingRestartInitiated": {
            "type": "boolean"
          },
          "serviceReady": {
            "type": "boolean"
          }
        }
      },
      "RolesInfo": {
        "properties": {
          "capabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rtSrchJobsQuota": {
            "type": "integer"
          },
          "srchDiskQuota": {
            "type": "integer"
          },
          "srchFilter": {
            "type": "string"
          },
          "srchIndexesAllowed": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "srchIndexesDefault": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "srchJobsQuota": {
            "type": "integer"
          },
          "srchTimeEarliest": {
            "type": "integer"
          },
          "srchTimeWin": {
            "type": "integer"
          }
        }
      },
      "RolesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RolesInfo"
          },
          {
            "properties": {
              "cumulativeRTSrchJobsQuota": {
                "type": "integer"
              },
              "cumulativeSrchJobsQuota": {
                "type": "integer"
              },
              "defaultApp": {
                "type": "string"
              },
              "importedRoles": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "RolesResponse": {
        "allOf": [
          {
            "properties": {
              "cumulativeRTSrchJobsQuota": {
                "type": "integer"
              },
              "cumulativeSrchJobsQuota": {
                "type": "integer"
              },
              "defaultApp": {
                "type": "string"
              },
              "imported": {
                "$ref": "#/components/schemas/ImportedRolesInfo"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/RolesInfo"
          }
        ]
      },
      "SelfStorageLocationBody": {
        "properties": {
          "bucketName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "folder": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "bucketName"
        ]
      },
      "SelfStorageLocationInfo": {
        "properties": {
          "bucketName": {
            "type": "string"
          },
          "bucketPath": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "folder": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "bucketName",
          "bucketPath",
          "folder",
          "description",
          "uri"
        ]
      },
      "SelfStorageLocationPolicy": {
        "properties": {
          "message": {
            "type": "string"
          },
          "policy": {
            "type": "object"
          }
        },
        "required": [
          "policy",
          "message"
        ]
      },
      "SelfStorageLocationPrefix": {
        "properties": {
          "message": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "message"
        ]
      },
      "SelfStorageLocationServiceAccounts": {
        "properties": {
          "clusterMaster": {
            "type": "string"
          },
          "indexer": {
            "type": "string"
          }
        },
        "required": [
          "clusterMaster",
          "indexer"
        ]
      },
      "SelfStorageLocationServiceAccountsResponse": {
        "properties": {
          "message": {
            "type": "string"
          },
          "serviceAccounts": {
            "$ref": "#/components/schemas/SelfStorageLocationServiceAccounts"
          }
        },
        "required": [
          "message"
        ]
      },
      "SplunkbaseBody": {
        "description": "the splunkbase app name and version to install. If no version specified, the latest version will be installed.",
        "properties": {
          "splunkbaseID": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "splunkbaseID"
        ],
        "type": "object"
      },
      "StackStatus": {
        "properties": {
          "infrastructure": {
            "properties": {
              "stackType": {
                "description": "the type of the stack (Victoria/Classic)",
                "type": "string"
              },
              "stackVersion": {
                "description": "the version of the stack",
                "type": "string"
              },
              "status": {
                "description": "the status of the infrastructure 1) Ready - The stack is ready, and infrastructure is up to date. 2) Pending - The stack has some pending changes that haven't been applied to the stack yet. The changes could be internal system changes for stacks or user requested changes like modification to allow lists. 3) Failed - There were some errors while applying changes to the stacks were being applied. The changes could be internal system changes for stacks or user requested changes like modification to allow lists. User should reach out to Splunk support for resolution.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "messages": {
            "properties": {
              "restartRequired": {
                "description": "The stack has a notification to restart splunk server. User should restart stack via UI for all configurations to be completed. It may take some time for the correct state for restart-required field to be populated in a Search Head Cluster, given sync delays with different Search Heads",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "infrastructure",
          "messages"
        ]
      },
      "TokenBody": {
        "properties": {
          "audience": {
            "type": "string"
          },
          "expiresOn": {
            "default": "+30d",
            "type": "string"
          },
          "type": {
            "default": "static",
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "required": [
          "user",
          "audience"
        ]
      },
      "TokenInfo": {
        "properties": {
          "audience": {
            "type": "string"
          },
          "expiresOn": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastUsed": {
            "format": "date-time",
            "type": "string"
          },
          "lastUsedIP": {
            "type": "string"
          },
          "notBefore": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "required": [
          "user",
          "audience",
          "id",
          "expiresOn",
          "notBefore",
          "status"
        ]
      },
      "UpdateManagedGlueResources": {
        "properties": {
          "managedGlueResources": {
            "items": {
              "$ref": "#/components/schemas/ManagedGlueResources"
            },
            "type": "array"
          }
        }
      },
      "UpdatePrivateConnectivity": {
        "properties": {
          "feature": {
            "$ref": "#/components/schemas/PrivateConnectivityFeatures"
          },
          "patchedCustomerAccountIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "UsersResponse": {
        "description": "Splunk user",
        "properties": {
          "capabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "defaultApp": {
            "type": "string"
          },
          "defaultAppSource": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "lastSuccessfulLogin": {
            "type": "string"
          },
          "lockedOut": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "capabilities",
          "defaultApp",
          "defaultAppSource",
          "email",
          "lockedOut",
          "fullName",
          "roles"
        ]
      },
      "WarningResponse": {
        "properties": {
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "aslProviderProperties": {
        "properties": {
          "localDatabase": {
            "type": "string"
          },
          "remoteDatabase": {
            "type": "string"
          },
          "remoteTables": {
            "items": {
              "description": "table names",
              "type": "string"
            },
            "type": "array"
          },
          "resourceShareArn": {
            "type": "string"
          },
          "resourceShareName": {
            "type": "string"
          }
        },
        "required": [
          "localDatabase",
          "remoteDatabase",
          "remoteTables",
          "resourceShareArn",
          "resourceShareName"
        ]
      },
      "extra": {
        "properties": {
          "columnIndexes": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "orgID": {
            "type": "string"
          },
          "partitionStyle": {
            "type": "string"
          }
        }
      },
      "partitionProjection": {
        "properties": {
          "accountIDKeyName": {
            "type": "string"
          },
          "accountIDs": {
            "items": {
              "description": "Cloud provide account Id's",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "regionKeyName": {
            "type": "string"
          },
          "regions": {
            "items": {
              "description": "Cloud regions",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "timeKeyName": {
            "type": "string"
          },
          "timeRange": {
            "type": "string"
          },
          "timeUnit": {
            "type": "string"
          }
        },
        "required": [
          "accountIDs",
          "regions"
        ]
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      },
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "API for managing splunk cloud stacks. (c) 2020 Splunk Inc. All rights reserved. I acknowledge that Splunk is not responsible for the installation or use of any application that is not a supported Splunk application and Splunk specifically disclaims the accuracy, integrity, quality, legality, usefulness or security of such application or its use. Installation and use of an application that is not a supported Splunk application is at your own risk. Please note that if data leaves Splunk Cloud as a result of installing or using such application, Splunkâ€™s security attestations do not apply to data outside Splunk Cloud. Learn more about installing private apps (link to https://docs.splunk.com/Documentation/SplunkCloud/8.2.2109/Config/ManageApps). Access and use is subject to the Splunk General Terms (https://www.splunk.com/en_us/legal/splunk-general-terms.html) and Splunk's Website Terms and Conditions (https://www.splunk.com/en_us/legal/terms/terms-of-use.html).",
    "title": "Splunk Cloud Admin API",
    "version": "v2"
  },
  "openapi": "3.0.0",
  "paths": {
    "/{stack}/adminconfig/v2/access/outbound-ports": {
      "get": {
        "description": "describe the outboundports with ports and subnets",
        "operationId": "GetOutboundports",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "outboundports": {
                      "description": "the subnets from where the stack feature can access to",
                      "items": {
                        "$ref": "#/components/schemas/OutboundResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of outbound ports"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "outbound"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "add subnets to the outboundports for the feature, if they don't already exist",
        "operationId": "AddOutboundports",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "outboundPorts": {
                    "items": {
                      "properties": {
                        "port": {
                          "format": "int32",
                          "type": "integer"
                        },
                        "subnets": {
                          "items": {
                            "description": "ipv4  subnet e.g. 21.45.63.00/32",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the new subnets",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarningResponse"
                }
              }
            },
            "description": "successfully submitted request to add an outbound port"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "outbound"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/access/outbound-ports-v6/{port}": {
      "get": {
        "description": "describe the outboundports with ports and ipv6 subnets",
        "operationId": "DescribeOutboundportsV6",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "the port on which we want to get the allowed ipv6 subnets",
            "in": "path",
            "name": "port",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "outboundports": {
                      "description": "the ipv6 subnets from where the stack feature can access to",
                      "items": {
                        "$ref": "#/components/schemas/OutboundResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of outbound ports"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "outbound",
          "ipv6"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/access/outbound-ports/{port}": {
      "delete": {
        "description": "delete an existing outbound port if it exists, from where the feature is accessible from",
        "operationId": "DeleteOutboundport",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "the outbound port to be deleted",
            "in": "path",
            "name": "port",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subnets": {
                    "items": {
                      "description": "ipv4  subnet e.g. 21.45.63.00/32",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the subnets to delete outbound ports for",
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully submitted request to delete outbound port"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "outbound"
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "describe the outboundports with ports and subnets",
        "operationId": "DescribeOutboundports",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "the outbound port to be deleted",
            "in": "path",
            "name": "port",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "outboundports": {
                      "description": "the subnets from where the stack feature can access to",
                      "items": {
                        "$ref": "#/components/schemas/OutboundResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of outbound ports"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "outbound"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/access/{feature}/ipallowlists": {
      "delete": {
        "description": "delete existing ip subnets (if they exists) from where the splunk cloud stack feature is accessible from",
        "operationId": "DeleteSubnets",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subnets": {
                    "items": {
                      "description": "ipv4 subnet e.g. 21.45.63.00/32",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the subnets to be deleted",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarningResponse"
                }
              }
            },
            "description": "accepted request to delete the forwarder ipallowlist"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "allowlist"
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "describe the allowlist with its status and subnets from where the feature is accessible from",
        "operationId": "DescribeAllowlist",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "subnets": {
                      "description": "the subnets from where the stack feature is accessible from",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of ip subnets"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "allowlist"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "add subnets to the allowlist for the feature, if they don't already exist",
        "operationId": "AddSubnets",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subnets": {
                    "items": {
                      "description": "ipv4 subnet e.g. 21.45.63.00/32",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the new subnets",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarningResponse"
                }
              }
            },
            "description": "accepted request to add a new forwarder ipallowlist"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "allowlist"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/access/{feature}/ipallowlists-v6": {
      "get": {
        "description": "describe the allowlist with its status and ipv6 subnets from where the feature is accessible from",
        "operationId": "DescribeAllowlistV6",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "subnets": {
                      "description": "the ipv6 subnets from where the stack feature is accessible from",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of ipv6 subnets"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "allowlist",
          "ipv6"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/access/{feature}/ipallowlists/{subnet}": {
      "delete": {
        "description": "delete an existing ip subnet if it exists, from where the feature is accessible from",
        "operationId": "DeleteSubnet",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          },
          {
            "description": "the subnet to be deleted",
            "in": "path",
            "name": "subnet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarningResponse"
                }
              }
            },
            "description": "accepted request to delete the forwarder ipallowlist"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "allowlist"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/apps": {
      "get": {
        "description": "list apps available on the stacks",
        "operationId": "ListApps",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "description": "filter apps based on splunkbase and non-splunkbase apps",
            "in": "query",
            "name": "splunkbase",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "apps": {
                      "items": {
                        "$ref": "#/components/schemas/App"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "successfully retrieved apps"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "install an app",
        "operationId": "InstallApp",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "ACS-Legal-Ack is required for installing private apps",
            "in": "header",
            "name": "ACS-Legal-Ack",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "is the app available in splunkbase",
            "in": "query",
            "name": "splunkbase",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Splunkbase sessionID",
            "in": "header",
            "name": "X-Splunkbase-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The app inspect token",
            "in": "header",
            "name": "X-Splunk-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ACS-Licensing-Ack is required for installing splunkbase apps",
            "in": "header",
            "name": "ACS-Licensing-Ack",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "package": {
                    "description": "the pre-approved app package file in tar.gz format",
                    "format": "binary",
                    "type": "string"
                  },
                  "token": {
                    "description": "the splunkbase authentication token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the app package in tar.gz format",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully installed a new app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/apps/victoria": {
      "get": {
        "description": "list apps available on the stacks",
        "operationId": "ListAppsVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "description": "filter apps based on splunkbase and non-splunkbase apps",
            "in": "query",
            "name": "splunkbase",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "apps": {
                      "items": {
                        "$ref": "#/components/schemas/App"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "successfully retrieved apps"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "AppsVictoria"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "install an app for Victoria stack",
        "operationId": "InstallAppVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "is the app available in splunkbase",
            "in": "query",
            "name": "splunkbase",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Splunkbase sessionID",
            "in": "header",
            "name": "X-Splunkbase-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The app inspect token",
            "in": "header",
            "name": "X-Splunk-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ACS-Legal-Ack is required for installing private apps",
            "in": "header",
            "name": "ACS-Legal-Ack",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ACS-Licensing-Ack is required for installing splunkbase apps",
            "in": "header",
            "name": "ACS-Licensing-Ack",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PrivateAppBody"
                  },
                  {
                    "$ref": "#/components/schemas/SplunkbaseBody"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully installed a new app"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully submitted an install request of an app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "AppsVictoria"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/apps/victoria/export/download/{app}": {
      "get": {
        "description": "fetch the app data and returns the selected contents as a tar file",
        "operationId": "DownloadAppExportVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          },
          {
            "$ref": "#/components/parameters/defaultDirectory"
          },
          {
            "$ref": "#/components/parameters/localDirectory"
          },
          {
            "$ref": "#/components/parameters/usersDirectory"
          },
          {
            "$ref": "#/components/parameters/confsOnly"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully exported an app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "AppsVictoria"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/apps/victoria/{app}": {
      "delete": {
        "description": "uninstall the app",
        "operationId": "UninstallAppVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted the app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "AppsVictoria"
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "get an app",
        "operationId": "DescribeAppVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully retrieved an app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "AppsVictoria"
        ],
        "x-auth-required": false
      },
      "patch": {
        "description": "update an installed splunkbase apps",
        "operationId": "PatchAppVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          },
          {
            "description": "The splunkbase sessionID",
            "in": "header",
            "name": "X-Splunkbase-Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ACS-Licensing-Ack is required for updating splunkbase apps",
            "in": "header",
            "name": "ACS-Licensing-Ack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchSplunkbaseBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully updated an installed app"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully submitted an update to an installed app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "AppsVictoria"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/apps/{app}": {
      "delete": {
        "description": "uninstall the app",
        "operationId": "UninstallApp",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully submitted a request to delete the app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "get an app",
        "operationId": "DescribeApp",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully retrieved an app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-auth-required": false
      },
      "patch": {
        "description": "update an installed splunkbase apps",
        "operationId": "PatchAppClassic",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          },
          {
            "description": "The splunkbase sessionID",
            "in": "header",
            "name": "X-Splunkbase-Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ACS-Licensing-Ack is required for updating splunkbase apps",
            "in": "header",
            "name": "ACS-Licensing-Ack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchSplunkbaseBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully updated an installed app"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "successfully submitted an update to an installed app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "AppsClassic"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/capabilities": {
      "get": {
        "description": "list capabilities",
        "operationId": "ListCapabilities",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/grantableOnly"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapabilitiesInfo"
                }
              }
            },
            "description": "list of capabilities"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Capabilities"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/managed-glue-resources": {
      "get": {
        "description": "Describe cloud resources managed resources ",
        "operationId": "DescribeManagedGlueResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeManagedGlueResources"
                }
              }
            },
            "description": "successfully submitted a cloud resource permissions update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "CloudResources",
          "ManagedGlueResources"
        ],
        "x-auth-required": false
      },
      "put": {
        "description": "add cloud resource permissions for a set of federated providers",
        "operationId": "UpdateManagedGlueResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagedGlueResources"
              }
            }
          },
          "description": "The Federated Providers that will have their permissions updated",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a cloud resource permissions update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "CloudResources",
          "ManagedGlueResources"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/buckets": {
      "get": {
        "description": "List all configured self storage locations on the stack",
        "operationId": "ListSelfStorageLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "selfStorageLocations": {
                      "items": {
                        "$ref": "#/components/schemas/SelfStorageLocationInfo"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "selfStorageLocations"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "list of available self storage locations"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "Create self storage location on the stack",
        "operationId": "CreateSelfStorageLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfStorageLocationBody"
              }
            }
          },
          "description": "Self Storage Location Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfStorageLocationInfo"
                }
              }
            },
            "description": "successfully submitted a new self storage location"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/buckets/{bucketName}/policy": {
      "get": {
        "description": "Get the IAM policy to configure S3 bucket for self storage location",
        "operationId": "GetSelfStorageLocationPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfStorageLocationPolicy"
                }
              }
            },
            "description": "self storage policy response"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/buckets/{bucketPath}": {
      "get": {
        "description": "Describe a configured self storage location on the stack",
        "operationId": "DescribeSelfStorageLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/bucketPath"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfStorageLocationInfo"
                }
              }
            },
            "description": "successfully describe a specific self storage location"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/configs/prefix": {
      "get": {
        "description": "Get the bucket prefix required to configure self storage location(s)",
        "operationId": "GetSelfStorageLocationPrefix",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfStorageLocationPrefix"
                }
              }
            },
            "description": "self storage location response"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/configs/service-accounts": {
      "get": {
        "description": "Get the service account for GCS bucket required to configure self storage location(s)",
        "operationId": "GetSelfStorageLocationServiceAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfStorageLocationServiceAccountsResponse"
                }
              }
            },
            "description": "self storage service account response"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/deployment/retry": {
      "post": {
        "description": "retry a specific deployment id of a stack",
        "operationId": "RetryDeployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/DeploymentInfo"
                    }
                  }
                }
              }
            },
            "description": "the newly retried deployment info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "system"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/deployment/status": {
      "get": {
        "description": "describe the deployment status of the stack",
        "operationId": "ListDeployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/DeploymentStatus"
                    }
                  }
                }
              }
            },
            "description": "deployment information: last deployment status of the stack"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "system"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/deployment/status/{deploymentID}": {
      "get": {
        "description": "describe the deployment status of the stack",
        "operationId": "DescribeDeployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/deploymentID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/DeploymentInfo"
                    }
                  }
                }
              }
            },
            "description": "describe the deployment info of a specific deployment id"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "system"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/emek/key": {
      "put": {
        "description": "EMEK Key upload",
        "operationId": "PutEmekKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "keyARN": {
                    "type": "string"
                  }
                },
                "required": [
                  "keyARN"
                ]
              }
            }
          },
          "description": "Key ARN to be uploaded"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmekKeyUploadResponse"
                }
              }
            },
            "description": "EMEK key upload accepted"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "EMEK"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/emek/key-policy": {
      "get": {
        "description": "Generate the key policy for EMEK",
        "operationId": "GetEmekPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "EMEK-Legal-Ack is required for generating key policy",
            "in": "header",
            "name": "EMEK-Legal-Ack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmekPolicy"
                }
              }
            },
            "description": "key policy response"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "EMEK"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/emek/waiver": {
      "get": {
        "description": "Generate legal waiver for EMEK",
        "operationId": "DescribeEmekWaiver",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "EMEK legal waiver"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "EMEK"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/enablement/{appGroup}/{featureName}": {
      "get": {
        "description": "describe the enablement status of an app feature",
        "operationId": "DescribeAppFeatureEnablement",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/appGroup"
          },
          {
            "$ref": "#/components/parameters/featureName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppFeatureEnablement"
                }
              }
            },
            "description": "describe the enablement status of an app feature"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Enablement"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "Enable or disable an app feature",
        "operationId": "SetAppFeatureEnablement",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/appGroup"
          },
          {
            "$ref": "#/components/parameters/featureName"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppFeatureEnablement"
              }
            }
          },
          "description": "enablement",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppFeatureEnablement"
                }
              }
            },
            "description": "returns whether the app feature has been enabled or disabled"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Enablement"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/indexes": {
      "get": {
        "description": "list all indexes available on the stack",
        "operationId": "ListIndexes",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "indexes": {
                      "items": {
                        "$ref": "#/components/schemas/IndexResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of indexes"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Indexes"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "create index on the stack",
        "operationId": "CreateIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexInfo"
              }
            }
          },
          "description": "Index Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInfo"
                }
              }
            },
            "description": "successfully submitted a new index"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Indexes"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/indexes/{index}": {
      "delete": {
        "description": "Delete index on the stack",
        "operationId": "DeleteIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/index"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "Name of the index object to be deleted",
          "required": true
        },
        "responses": {
          "202": {
            "description": "index deletion request submitted"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Indexes"
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "get index info on the stack",
        "operationId": "GetIndexInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/index"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "indexinfo": {
                      "$ref": "#/components/schemas/IndexResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Index Object Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Indexes"
        ],
        "x-auth-required": false
      },
      "patch": {
        "description": "Modify index info on the stack",
        "operationId": "PatchIndexInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/index"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchIndexInfo"
              }
            }
          },
          "description": "Modify index object info",
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully submitted index update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Indexes"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/inputs/http-event-collectors": {
      "get": {
        "description": "List of all HEC objects",
        "operationId": "ListHECs",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "http_event_collectors": {
                      "items": {
                        "$ref": "#/components/schemas/HecInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "fetch all hec info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "Create hec token for the stack",
        "operationId": "CreateHEC",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HecSpec"
              }
            }
          },
          "description": "Hec Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "http-event-collector": {
                      "$ref": "#/components/schemas/HecSpec"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "successfully submitted a new hec token"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/inputs/http-event-collectors/{hec}": {
      "delete": {
        "description": "delete HEC",
        "operationId": "DeleteHec",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/hec"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "Name of the HEC Object to be deleted",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted hec token deletion"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "Get detailed Info about a particular HEC",
        "operationId": "DescribeHec",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/hec"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "http-event-collector": {
                      "$ref": "#/components/schemas/HecInfo"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Hec Object Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-auth-required": false
      },
      "patch": {
        "description": "Modify properties of HEC",
        "operationId": "PatchHEC",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/hec"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HecSpec"
              }
            }
          },
          "description": "Modify Hec object",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a hec token update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-auth-required": false
      },
      "put": {
        "description": "Modify properties of HEC",
        "operationId": "UpdateHEC",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/hec"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HecSpec"
              }
            }
          },
          "description": "Modify Hec object",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a hec token update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/limits": {
      "get": {
        "description": "get all limits configuration from the stack",
        "operationId": "GetAllLimitsConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "description": "All Limits Configuration"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Limits"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/limits/defaults": {
      "get": {
        "description": "get default, minimum and maximum values for all limits configuration from the stack",
        "operationId": "GetAllLimitsConfigDefaults",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LimitStanza"
                  },
                  "type": "array"
                }
              }
            },
            "description": "All Limits Configuration's default, mininimum, and maximum values"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Limits"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/limits/{stanza}": {
      "get": {
        "description": "get limit configuration from the stack",
        "operationId": "GetLimitConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "limitconfiguration": {
                      "$ref": "#/components/schemas/LimitConfigurationResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Limit Configuration"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Limits"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "add limit configuration to the stack",
        "operationId": "AddLimitConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitConfigurationInfo"
              }
            }
          },
          "description": "Limit Setting Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a limit configuration update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Limits"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/limits/{stanza}/defaults": {
      "get": {
        "description": "get default, minimum, and maximum values for limit configuration from the stack",
        "operationId": "GetLimitsConfigDefaults",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LimitStanza"
                }
              }
            },
            "description": "Limit Configuration's default, mininimum, and maximum values"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Limits"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/limits/{stanza}/reset": {
      "post": {
        "description": "reset limit configuration on the stack",
        "operationId": "ResetLimitConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitResetSettingsList"
              }
            }
          },
          "description": "Limit Setting Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a reset limit configuration update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Limits"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/limits/{stanza}/{key}": {
      "get": {
        "description": "get limit configuration from the stack",
        "operationId": "GetKeyLimitConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          },
          {
            "$ref": "#/components/parameters/key"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "limitconfiguration": {
                      "$ref": "#/components/schemas/LimitConfigurationResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Limit Configuration"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Limits"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/maintenance-windows/preferences": {
      "get": {
        "description": "Describe maintenance window preferences for a stack.",
        "operationId": "DescribeMaintenanceWindowsPreferences",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindowsPreferencesResponse"
                }
              }
            },
            "description": "successfully described the maintenance window preferences for the stack"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MaintenanceWindows"
        ],
        "x-auth-required": false
      },
      "put": {
        "description": "Update maintenance window preferences for a stack.",
        "operationId": "UpdateMaintenanceWindowsPreferences",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceWindowsPreferencesRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "successfully updated the maintenance window preferences for the stack"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MaintenanceWindows"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/maintenance-windows/schedules": {
      "get": {
        "description": "List all scheduled maintenance windows schedules on the stack. The default time range is 30 days. If both fromTime and toTime is empty, the default range is +30 days from current time. If only toTime is given, the default range is -30 days from toTime.",
        "operationId": "ListMaintenanceWindowsSchedules",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/nextLink"
          },
          {
            "$ref": "#/components/parameters/fromTime"
          },
          {
            "$ref": "#/components/parameters/toTime"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MaintenanceWindowsResponse"
                  }
                }
              }
            },
            "description": "successfully listed all scheduled maintenance windows schedules"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MaintenanceWindows"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/maintenance-windows/schedules/{scheduleID}": {
      "get": {
        "description": "Describe a specific maintenance window schedule",
        "operationId": "DescribeMaintenanceWindowsSchedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/scheduleID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindowsSchedule"
                }
              }
            },
            "description": "successfully described a specific maintenance window schedule"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MaintenanceWindows"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/maintenance-windows/schedules/{scheduleID}/audits": {
      "get": {
        "description": "Audit status changes for a specific maintenance window schedule.",
        "operationId": "AuditMaintenanceWindowsSchedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/scheduleID"
          },
          {
            "$ref": "#/components/parameters/fromTime"
          },
          {
            "$ref": "#/components/parameters/toTime"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MaintenanceWindowsAuditResponse"
                  }
                }
              }
            },
            "description": "successfully list down status changes for a specific maintenance window schedule"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MaintenanceWindows"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/observability/capabilities": {
      "post": {
        "description": "enables the o11y-splunk centralized RBAC integration including the addition of o11y roles and capabilities on the stack.",
        "operationId": "PostObservabilityCapabilitiesOnSplunk",
        "parameters": [
          {
            "description": "The stack name.",
            "in": "path",
            "name": "stack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnableObservabilityCapabilitiesResponse"
                }
              }
            },
            "description": "Successfully submitted request to update stack's spec"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "tags": [
          "Observability"
        ]
      }
    },
    "/{stack}/adminconfig/v2/observability/enable-centralized-rbac": {
      "put": {
        "description": "set the paired Splunk Cloud stack as the RBAC source for Splunk Observability Cloud organization",
        "operationId": "EnableRbacOnO11y",
        "parameters": [
          {
            "description": "Observability Admin Access Token",
            "in": "header",
            "name": "o11y-access-token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The stack name.",
            "in": "path",
            "name": "stack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "set the paired Splunk Cloud stack as the RBAC source for Splunk Observability Cloud organization"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "tags": [
          "Observability"
        ]
      }
    },
    "/{stack}/adminconfig/v2/observability/sso-pairing": {
      "post": {
        "description": "Pair your Splunk Cloud stack to the Observability cloud org to use the stack as Identity Provider",
        "operationId": "PostObservabilityPairing",
        "parameters": [
          {
            "description": "Observability Admin Access Token",
            "in": "header",
            "name": "o11y-access-token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The stack name.",
            "in": "path",
            "name": "stack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEcSsoPairingResponse"
                }
              }
            },
            "description": "Successfully started pairing Splunk Cloud stack to the Observability Org"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "tags": [
          "Observability"
        ]
      }
    },
    "/{stack}/adminconfig/v2/observability/sso-pairing/{pairingId}": {
      "get": {
        "description": "Gets a status for pairing your Splunk Cloud stack with the Observability cloud Org.",
        "operationId": "GetObservabilityPairingStatus",
        "parameters": [
          {
            "description": "Observability Admin Access Token",
            "in": "header",
            "name": "o11y-access-token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The stack name.",
            "in": "path",
            "name": "stack",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A pairing ID.",
            "in": "path",
            "name": "pairingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEcSsoPairingStatusResponse"
                }
              }
            },
            "description": "Successfully found pairing status for the provided pairing ID"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "tags": [
          "Observability"
        ]
      }
    },
    "/{stack}/adminconfig/v2/permissions/apps": {
      "get": {
        "description": "List permissions of all apps",
        "operationId": "ListPermissionsApps",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokeninfo": {
                      "$ref": "#/components/schemas/AppPermsList"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully List Apps Permissions"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "PermissionsApps"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/permissions/apps/{app}": {
      "get": {
        "description": "get an apps permissions",
        "operationId": "DescribePermissionsApps",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppPerms"
                }
              }
            },
            "description": "successfully retrieved an apps permissions"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "PermissionsApps"
        ],
        "x-auth-required": false
      },
      "patch": {
        "description": "Modify an app's permissions",
        "operationId": "PatchPermissionsApps",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchAppPermsRequest"
              }
            }
          },
          "description": "Modify app permissions",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully submitted app permissions update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "PermissionsApps"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/private-connectivity/eligibility": {
      "get": {
        "description": "describe the eligibility of stack for enabling private connectivity",
        "operationId": "ValidatePrivateConnectivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeEligibilityPrivateConnectivity"
                }
              }
            },
            "description": "display eligibility of the stack for enabling private connectivity"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Private Connectivity",
          "Private Link"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/private-connectivity/endpoints": {
      "get": {
        "description": "describes the status, customerAccountIds and endpoint name",
        "operationId": "DescribePrivateConnectivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "select which feature endpoint tried to retrieve, supported feature: search, ingest. show all if no feature specified",
            "in": "query",
            "name": "feature",
            "schema": {
              "enum": [
                "search",
                "ingest",
                "all"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribePrivateConnectivity"
                }
              }
            },
            "description": "display status, customerAccountIds and endpoint name if private connectivity is enabled. if private connectivity is disabled status and reason are displayed"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Private Connectivity",
          "Private Link"
        ],
        "x-auth-required": false
      },
      "patch": {
        "description": "updates private connectivity and patches provided customerAccountIds to the private network",
        "operationId": "UpdatePrivateConnectivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnablePrivateConnectivity"
              }
            }
          },
          "description": "Customer AccountIds",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePrivateConnectivity"
                }
              }
            },
            "description": "returns customerAccountIds that were added to the private network"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Private Connectivity",
          "Private Link"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "enables private connectivity and adds provided customerAccountIds to the private network",
        "operationId": "EnablePrivateConnectivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnablePrivateConnectivity"
              }
            }
          },
          "description": "Customer AccountIds",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnablePrivateConnectivity"
                }
              }
            },
            "description": "returns customerAccountIds that were added to the private network"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Private Connectivity",
          "Private Link"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/python-runtime": {
      "get": {
        "description": "describe python version",
        "operationId": "GetPythonVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PythonVersionResponse"
                }
              }
            },
            "description": "Python Version Object Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Python"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "Change python version on co2 stack spec",
        "operationId": "ChangePythonVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePythonVersionRequest"
              }
            }
          },
          "description": "python version flag",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PythonVersionResponse"
                }
              }
            },
            "description": "successfully set python version on stack spec"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Python Version"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/restart-now": {
      "post": {
        "description": "Restart a search head on a non-cluster stack, or initiate a rolling restart on a search-head-cluster stack",
        "operationId": "RestartStack",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartResponse"
                }
              }
            },
            "description": "successfully submitted a restart request"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "restart"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/restart/status": {
      "get": {
        "description": "Get rolling restart status for a search-head-cluster stack",
        "operationId": "RestartStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "shcStatus": {
                      "items": {
                        "$ref": "#/components/schemas/RestartStatus"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "successfully retrieved restart status"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "restart"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/roles": {
      "get": {
        "description": "list all roles",
        "operationId": "ListRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "roles": {
                      "items": {
                        "$ref": "#/components/schemas/RolesResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of roles"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Roles"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "create a new role on the stack",
        "operationId": "CreateRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/federatedSearchManage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRolesRequest"
              }
            }
          },
          "description": "Role Request Body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                }
              }
            },
            "description": "successfully created a new role"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Roles"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/roles/{roleName}": {
      "delete": {
        "description": "delete a specific role",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/roleName"
          }
        ],
        "responses": {
          "200": {
            "description": "Role Successfully deleted"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Roles"
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "describe a specific role",
        "operationId": "DescribeRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/roleName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                }
              }
            },
            "description": "Role Object Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Roles"
        ],
        "x-auth-required": false
      },
      "patch": {
        "description": "Modify a specific role on the stack",
        "operationId": "PatchRoleInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/roleName"
          },
          {
            "$ref": "#/components/parameters/federatedSearchManage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequest"
              }
            }
          },
          "description": "Modify role object info",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                }
              }
            },
            "description": "successfully modified a specific role role"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Roles"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/status": {
      "get": {
        "description": "describe the generic information about the stack",
        "operationId": "DescribeStack",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StackStatus"
                    }
                  }
                }
              }
            },
            "description": "stack information: status, type, version"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "system"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/tokens": {
      "get": {
        "description": "get all tokens",
        "operationId": "ListTokens",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/tokenStatus"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokens": {
                      "items": {
                        "$ref": "#/components/schemas/TokenInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of tokens"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "create a token to authenticate against ACS",
        "operationId": "CreateToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenBody"
              }
            }
          },
          "description": "Token Post Body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokeninfo": {
                      "$ref": "#/components/schemas/TokenInfo"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully added a new token"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/tokens/{tokenID}": {
      "delete": {
        "description": "delete token on the stack",
        "operationId": "DeleteToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/tokenID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted token"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "get token info",
        "operationId": "GetTokenInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/tokenID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokeninfo": {
                      "$ref": "#/components/schemas/TokenInfo"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully Get Token Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/users": {
      "get": {
        "description": "list all users",
        "operationId": "ListUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "users": {
                      "items": {
                        "$ref": "#/components/schemas/UsersResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of users"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "x-auth-required": false
      },
      "post": {
        "description": "create a new user",
        "operationId": "CreateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/federatedSearchManage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "description": "Create User Request Body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            },
            "description": "successfully created a new user"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/users/{userName}": {
      "delete": {
        "description": "delete a specific user",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/userName"
          }
        ],
        "responses": {
          "200": {
            "description": "User Successfully deleted"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "x-auth-required": false
      },
      "get": {
        "description": "describe a specific user",
        "operationId": "DescribeUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/userName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            },
            "description": "User Object Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "x-auth-required": false
      },
      "patch": {
        "description": "Modify a specific user on the stack",
        "operationId": "PatchUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/userName"
          },
          {
            "$ref": "#/components/parameters/federatedSearchManage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchUserRequest"
              }
            }
          },
          "description": "Modify user object info",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            },
            "description": "successfully modified a specific user"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/workflows/{workflowName}": {
      "get": {
        "description": "Get a workflow status given a workflow name",
        "operationId": "DescribeWorkflow",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/workflowName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DescribeWorkflowResponseObject"
                  }
                }
              }
            },
            "description": "successfully list all scheduled workflow status"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "PlatformOrchestrator"
        ],
        "x-auth-required": false
      }
    }
  }
}
